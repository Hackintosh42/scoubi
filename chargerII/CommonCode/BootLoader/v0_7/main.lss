
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00003dae  00000642  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005ae  00003800  00003800  00000094  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000087  00800100  00800100  00000642  2**0
                  ALLOC
  3 .noinit       00000000  00800187  00800187  00000642  2**0
                  CONTENTS
  4 .eeprom       00000000  00810000  00810000  00000642  2**0
                  CONTENTS
  5 .stab         00000e70  00000000  00000000  00000644  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .stabstr      00000924  00000000  00000000  000014b4  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00003800 <__vectors>:
    3800:	0c 94 34 1c 	jmp	0x3868
    3804:	0c 94 4f 1c 	jmp	0x389e
    3808:	0c 94 4f 1c 	jmp	0x389e
    380c:	0c 94 4f 1c 	jmp	0x389e
    3810:	0c 94 4f 1c 	jmp	0x389e
    3814:	0c 94 4f 1c 	jmp	0x389e
    3818:	0c 94 4f 1c 	jmp	0x389e
    381c:	0c 94 4f 1c 	jmp	0x389e
    3820:	0c 94 4f 1c 	jmp	0x389e
    3824:	0c 94 4f 1c 	jmp	0x389e
    3828:	0c 94 4f 1c 	jmp	0x389e
    382c:	0c 94 4f 1c 	jmp	0x389e
    3830:	0c 94 4f 1c 	jmp	0x389e
    3834:	0c 94 4f 1c 	jmp	0x389e
    3838:	0c 94 4f 1c 	jmp	0x389e
    383c:	0c 94 4f 1c 	jmp	0x389e
    3840:	0c 94 4f 1c 	jmp	0x389e
    3844:	0c 94 4f 1c 	jmp	0x389e
    3848:	0c 94 4f 1c 	jmp	0x389e
    384c:	0c 94 4f 1c 	jmp	0x389e
    3850:	0c 94 4f 1c 	jmp	0x389e
    3854:	0c 94 4f 1c 	jmp	0x389e
    3858:	0c 94 4f 1c 	jmp	0x389e
    385c:	0c 94 4f 1c 	jmp	0x389e
    3860:	0c 94 4f 1c 	jmp	0x389e
    3864:	0c 94 4f 1c 	jmp	0x389e

00003868 <__ctors_end>:
    3868:	11 24       	eor	r1, r1
    386a:	1f be       	out	0x3f, r1	; 63
    386c:	cf ef       	ldi	r28, 0xFF	; 255
    386e:	d4 e0       	ldi	r29, 0x04	; 4
    3870:	de bf       	out	0x3e, r29	; 62
    3872:	cd bf       	out	0x3d, r28	; 61

00003874 <__do_copy_data>:
    3874:	11 e0       	ldi	r17, 0x01	; 1
    3876:	a0 e0       	ldi	r26, 0x00	; 0
    3878:	b1 e0       	ldi	r27, 0x01	; 1
    387a:	ee ea       	ldi	r30, 0xAE	; 174
    387c:	fd e3       	ldi	r31, 0x3D	; 61
    387e:	02 c0       	rjmp	.+4      	; 0x3884

00003880 <.do_copy_data_loop>:
    3880:	05 90       	lpm	r0, Z+
    3882:	0d 92       	st	X+, r0

00003884 <.do_copy_data_start>:
    3884:	a0 30       	cpi	r26, 0x00	; 0
    3886:	b1 07       	cpc	r27, r17
    3888:	d9 f7       	brne	.-10     	; 0x3880

0000388a <__do_clear_bss>:
    388a:	11 e0       	ldi	r17, 0x01	; 1
    388c:	a0 e0       	ldi	r26, 0x00	; 0
    388e:	b1 e0       	ldi	r27, 0x01	; 1
    3890:	01 c0       	rjmp	.+2      	; 0x3894

00003892 <.do_clear_bss_loop>:
    3892:	1d 92       	st	X+, r1

00003894 <.do_clear_bss_start>:
    3894:	a7 38       	cpi	r26, 0x87	; 135
    3896:	b1 07       	cpc	r27, r17
    3898:	e1 f7       	brne	.-8      	; 0x3892
    389a:	0c 94 7b 1d 	jmp	0x3af6

0000389e <__bad_interrupt>:
    389e:	0c 94 00 1c 	jmp	0x3800

000038a2 <send_boot>:
unsigned char device;

void send_boot(void)
{
	sendchar('A');
    38a2:	81 e4       	ldi	r24, 0x41	; 65
    38a4:	0e 94 94 1e 	call	0x3d28
	sendchar('V');
    38a8:	86 e5       	ldi	r24, 0x56	; 86
    38aa:	0e 94 94 1e 	call	0x3d28
	sendchar('R');
    38ae:	82 e5       	ldi	r24, 0x52	; 82
    38b0:	0e 94 94 1e 	call	0x3d28
	sendchar('B');
    38b4:	82 e4       	ldi	r24, 0x42	; 66
    38b6:	0e 94 94 1e 	call	0x3d28
	sendchar('O');
    38ba:	8f e4       	ldi	r24, 0x4F	; 79
    38bc:	0e 94 94 1e 	call	0x3d28
	sendchar('O');
    38c0:	8f e4       	ldi	r24, 0x4F	; 79
    38c2:	0e 94 94 1e 	call	0x3d28
	sendchar('T');
    38c6:	84 e5       	ldi	r24, 0x54	; 84
    38c8:	0e 94 94 1e 	call	0x3d28
    38cc:	08 95       	ret

000038ce <BufferLoad>:
}

void (*jump_to_app)(void) = 0x0000;

int main(void)
{
	unsigned  tempi;
	char val;
    
	#ifdef START_POWERSAVE
	char OK = 1;    
	#endif
    
	cli();
	
	MCUCR = (1<<IVCE);       
	MCUCR = (1<<IVSEL);             //move interruptvectors to the Boot sector    

	USART_Init(UART_BAUD_SELECT(BAUDRATE,XTAL),UARTSINGLE); 	// single speed
	// USART_Init(UART_BAUD_SELECT(BAUDRATE/2,XTAL),UARTDOUBLE);  // double speed
	
	#if defined(START_POWERSAVE)
	/* 
		This is an adoption of the Butterfly Bootloader startup-sequence.
		It may look a little strange but separating the login-loop from
		the main parser-loop gives a lot a possibilities (timeout, sleep-modes
	    etc.).
	*/		
	BLDDR  &= ~(1<<BLPNUM);	// set as Input
	BLPORT |= (1<<BLPNUM);		// Enable pullup
	  
	for(;OK;)
	{
/*		if((BLPIN & (1<<BLPNUM)))	
		{  
			// jump to main app if pin is not grounded
			BLPORT &= ~(1<<BLPNUM);  // set to default
			MCUCR = (1<<IVCE); 
			MCUCR = (0<<IVSEL);      // move interruptvectors to the Application sector
			jump_to_app();	// Jump to application sector
		}
		else
*/    
		{	
			val = recchar();
		
			if( val == 0x1B ) /* ESC */
	        {				// AVRPROG connection
				while (val != 'S')	// Wait for signon 
				{
					val = recchar();
				}
				send_boot();					// Report signon
				OK = 0;
			}
			else
				sendchar('?');
	        }
		// Power-Save code here
	}
	
	#elif defined(START_SIMPLE)
	BLDDR  &= ~(1<<BLPNUM);	// set as Input
	BLPORT |= (1<<BLPNUM);		// Enable pullup
/*	
	if((BLPIN & (1<<BLPNUM)))
	{  
		// jump to main app if pin is not grounded
		BLPORT &= ~(1<<BLPNUM);  // set to default
		MCUCR = (1<<IVCE); 
		MCUCR = (0<<IVSEL);             //move interruptvectors to the Application sector
		jump_to_app();	// Jump to application sector
	}
*/  

	#elif defined(START_BOOTICE)
	#warning "BOOTICE mode - no startup-condition"

	#else
	#error "Select START_ condition for bootloader in main.c"
	#endif

    for(;;)                             
    {   
		val=recchar();
         
        if(val=='a')                        //Autoincrement?
        {
          sendchar('Y');			//Autoincrement is quicker
        }
 
        else if(val=='A')                   //write address 
        {
			address=recchar();                //read address 8 MSB
			address=(address<<8)|recchar();
			
			address=address<<1;               // !! convert from word address to byte address
			sendchar('\r');
        }
        
        else if(val=='b')
		{									// Buffer load support
			sendchar('Y');					// Report buffer load supported
			sendchar((UART_RX_BUFFER_SIZE >> 8) & 0xFF);
											// Report buffer size in bytes
			sendchar(UART_RX_BUFFER_SIZE & 0xFF);
		}

		else if(val=='B')					// Start buffer load
		{
			tempi = recchar() << 8;			// Load high byte of buffersize
			tempi |= recchar();				// Load low byte of buffersize
			val = recchar();				// Load memory type ('E' or 'F')
			sendchar (BufferLoad(tempi,val));
											// Start downloading of buffer
		}
		
		else if(val == 'g')					// Block read
		{
			tempi = (recchar() << 8) | recchar();

			val = recchar();				// Get memtype
			BlockRead(tempi,val);			// Perform the block read
		}		

        else if(val=='e')                   //Chip erase 
        {
			if (device == devtype)
			{
				// erase only main section (bootloader protection)
				address = 0; 
				while ( APP_END > address )
				{
					boot_page_erase(address);	// Perform page erase
					boot_spm_busy_wait();		// Wait until the memory is erased.
					address += SPM_PAGESIZE;
				}
			}
			boot_rww_enable();
			sendchar('\r');        
        }

        else if(val=='E')                   //Exit upgrade
        {
			wdt_enable(WDTO_15MS); // Enable Watchdog Timer to give reset
			sendchar('\r');
        }
       
	   #ifdef WRITELOCKBITS
	   #warning "Extension 'WriteLockBits' enabled"
	   // TODO: does not work reliably
        else if(val=='l')                   // write lockbits 
        {
			if (device == devtype)
			{
				// write_lock_bits(recchar());
				boot_lock_bits_set(recchar());	// boot.h takes care of mask
				boot_spm_busy_wait();
			}
			sendchar('\r');
		}
		#endif
        
        else if(val=='P')     // Enter programming mode 
        {
			sendchar('\r');
        }
        
        else if(val=='L')   // Leave programming mode
        { 
			sendchar('\r');
        }
        
        else if (val=='p')		// return programmer type
        {
          sendchar('S');		// always serial programmer
        } 
		
#ifdef ENABLEREADFUSELOCK
#warning "Extension 'ReadFuseLock' enabled"
        else if(val=='F')                   // read "low" fuse bits
        {
			sendchar( read_fuse_lock(0x0000, _BV(BLBSET)|_BV(SPMEN)) );
        }

        else if(val=='r')                   // read lock bits
        { 
			sendchar( read_fuse_lock(0x0001, _BV(BLBSET)|_BV(SPMEN)) );
        }        

        else if(val=='N')                   // read high fuse bits
        {
			sendchar( read_fuse_lock(0x0003,_BV(BLBSET)|_BV(SPMEN)) );
        }        

        else if(val=='Q')                   // read extended fuse bits
        {
			sendchar( read_fuse_lock(0x0002,_BV(BLBSET)|_BV(SPMEN)) );
        }
#endif	
// end of ENABLEREADFUSELOCK section

        else if(val=='t')                   // Return device type 
        {
			sendchar(devtype);
			sendchar(0);
        }

        else if ((val=='x')||(val=='y'))	// clear and set LED ignored
        {
			recchar();
			sendchar('\r');
        }
  
		else if (val=='T')					// set device
		{
			device = recchar();
			sendchar('\r');
		}
		
        else if (val=='S')                  // Return software identifier 
        {
			send_boot();
        }                
        
        else if (val=='V')                  // Return Software Version
        {
			sendchar(VERSION_HIGH);
			sendchar(VERSION_LOW);
        }        

        else if (val=='s')                  // Return Signature Byte
        {
			sendchar(sig_byte1);
			sendchar(sig_byte2);
			sendchar(sig_byte3);
        }       

        else if(val != 0x1b) /* ESC */
        {
			sendchar('?');
        }
    }	// end of "parser" for-loop
	
	return 0;
}


unsigned char BufferLoad(unsigned int size, unsigned char mem)
{
    38ce:	bf 92       	push	r11
    38d0:	cf 92       	push	r12
    38d2:	df 92       	push	r13
    38d4:	ef 92       	push	r14
    38d6:	ff 92       	push	r15
    38d8:	0f 93       	push	r16
    38da:	1f 93       	push	r17
    38dc:	cf 93       	push	r28
    38de:	df 93       	push	r29
    38e0:	8c 01       	movw	r16, r24
    38e2:	b6 2e       	mov	r11, r22
	unsigned int data, cnt;
	uint32_t tempaddress;
		
	for (cnt=0; cnt<UART_RX_BUFFER_SIZE; cnt++) {
    38e4:	20 e0       	ldi	r18, 0x00	; 0
    38e6:	30 e0       	ldi	r19, 0x00	; 0
    38e8:	e9 01       	movw	r28, r18
    38ea:	ce 5f       	subi	r28, 0xFE	; 254
    38ec:	de 4f       	sbci	r29, 0xFE	; 254
    38ee:	79 01       	movw	r14, r18
    38f0:	08 94       	sec
    38f2:	e1 1c       	adc	r14, r1
    38f4:	f1 1c       	adc	r15, r1
		if (cnt<size) gBuffer[cnt]=recchar();
    38f6:	20 17       	cp	r18, r16
    38f8:	31 07       	cpc	r19, r17
    38fa:	18 f4       	brcc	.+6      	; 0x3902
    38fc:	0e 94 b4 1e 	call	0x3d68
    3900:	01 c0       	rjmp	.+2      	; 0x3904
		else gBuffer[cnt]=0xFF;
    3902:	8f ef       	ldi	r24, 0xFF	; 255
    3904:	88 83       	st	Y, r24
    3906:	97 01       	movw	r18, r14
    3908:	20 38       	cpi	r18, 0x80	; 128
    390a:	31 05       	cpc	r19, r1
    390c:	68 f3       	brcs	.-38     	; 0x38e8
	}
	cnt=0;
    390e:	20 e0       	ldi	r18, 0x00	; 0
    3910:	30 e0       	ldi	r19, 0x00	; 0

	tempaddress = address;					// Store address in page
    3912:	c0 90 82 01 	lds	r12, 0x0182
    3916:	d0 90 83 01 	lds	r13, 0x0183
    391a:	e0 90 84 01 	lds	r14, 0x0184
    391e:	f0 90 85 01 	lds	r15, 0x0185
	
	my_eeprom_busy_wait();
    3922:	8f b3       	in	r24, 0x1f	; 31
    3924:	99 27       	eor	r25, r25
    3926:	96 95       	lsr	r25
    3928:	87 95       	ror	r24
    392a:	ac 01       	movw	r20, r24
    392c:	41 70       	andi	r20, 0x01	; 1
    392e:	50 70       	andi	r21, 0x00	; 0
    3930:	80 fd       	sbrc	r24, 0
    3932:	f7 cf       	rjmp	.-18     	; 0x3922
	
	if (device == devtype)
    3934:	80 91 86 01 	lds	r24, 0x0186
    3938:	85 37       	cpi	r24, 0x75	; 117
    393a:	09 f0       	breq	.+2      	; 0x393e
    393c:	7f c0       	rjmp	.+254    	; 0x3a3c
	{
		if (mem == 'F')		// Flash
    393e:	86 e4       	ldi	r24, 0x46	; 70
    3940:	b8 16       	cp	r11, r24
    3942:	09 f0       	breq	.+2      	; 0x3946
    3944:	39 c0       	rjmp	.+114    	; 0x39b8
    3946:	41 e0       	ldi	r20, 0x01	; 1
    3948:	c2 e0       	ldi	r28, 0x02	; 2
    394a:	d1 e0       	ldi	r29, 0x01	; 1
		{
			do {
				data=gBuffer[cnt++];
    394c:	89 91       	ld	r24, Y+
    394e:	28 2f       	mov	r18, r24
    3950:	33 27       	eor	r19, r19
				data|=(gBuffer[cnt++]<<8);
    3952:	89 91       	ld	r24, Y+
    3954:	99 27       	eor	r25, r25
    3956:	98 2f       	mov	r25, r24
    3958:	88 27       	eor	r24, r24
    395a:	28 2b       	or	r18, r24
    395c:	39 2b       	or	r19, r25
				boot_page_fill(address,data);
    395e:	80 91 82 01 	lds	r24, 0x0182
    3962:	90 91 83 01 	lds	r25, 0x0183
    3966:	09 01       	movw	r0, r18
    3968:	fc 01       	movw	r30, r24
    396a:	40 93 57 00 	sts	0x0057, r20
    396e:	e8 95       	spm
    3970:	11 24       	eor	r1, r1
											//call asm routine. 
				address=address+2;  		// Select next word in memory
    3972:	80 91 82 01 	lds	r24, 0x0182
    3976:	90 91 83 01 	lds	r25, 0x0183
    397a:	a0 91 84 01 	lds	r26, 0x0184
    397e:	b0 91 85 01 	lds	r27, 0x0185
    3982:	02 96       	adiw	r24, 0x02	; 2
    3984:	a1 1d       	adc	r26, r1
    3986:	b1 1d       	adc	r27, r1
    3988:	80 93 82 01 	sts	0x0182, r24
    398c:	90 93 83 01 	sts	0x0183, r25
    3990:	a0 93 84 01 	sts	0x0184, r26
    3994:	b0 93 85 01 	sts	0x0185, r27
				size -= 2;					// Reduce number of bytes to write by two    
    3998:	02 50       	subi	r16, 0x02	; 2
    399a:	10 40       	sbci	r17, 0x00	; 0
			} while(size);					// Loop until all bytes written
    399c:	b9 f6       	brne	.-82     	; 0x394c

			/* commented out since not compatible with mega8 - 
			   secondary benefit: saves memory 
			tempaddress &= 0xFF80;			// Ensure the address points to the first byte in the page
			*/

			boot_page_write(tempaddress);
    399e:	85 e0       	ldi	r24, 0x05	; 5
    39a0:	f6 01       	movw	r30, r12
    39a2:	80 93 57 00 	sts	0x0057, r24
    39a6:	e8 95       	spm
			boot_spm_busy_wait();	
    39a8:	07 b6       	in	r0, 0x37	; 55
    39aa:	00 fc       	sbrc	r0, 0
    39ac:	fd cf       	rjmp	.-6      	; 0x39a8
			boot_rww_enable();				//Re-enable the RWW section
    39ae:	81 e1       	ldi	r24, 0x11	; 17
    39b0:	80 93 57 00 	sts	0x0057, r24
    39b4:	e8 95       	spm
    39b6:	3f c0       	rjmp	.+126    	; 0x3a36
			
			/* commented out since not compatible with mega8
			if (address != (address & 0xFF80))
			{								// Ensure that the address points to the beginning of the next page
				address &= 0xFF80;
				address += SPM_PAGESIZE;
			}
			*/	
		}									// End FLASH
		
		if (mem == 'E')						// Start EEPROM
    39b8:	85 e4       	ldi	r24, 0x45	; 69
    39ba:	b8 16       	cp	r11, r24
    39bc:	e1 f5       	brne	.+120    	; 0x3a36
        {
			address>>=1;
    39be:	80 91 82 01 	lds	r24, 0x0182
    39c2:	90 91 83 01 	lds	r25, 0x0183
    39c6:	a0 91 84 01 	lds	r26, 0x0184
    39ca:	b0 91 85 01 	lds	r27, 0x0185
    39ce:	b6 95       	lsr	r27
    39d0:	a7 95       	ror	r26
    39d2:	97 95       	ror	r25
    39d4:	87 95       	ror	r24
    39d6:	80 93 82 01 	sts	0x0182, r24
    39da:	90 93 83 01 	sts	0x0183, r25
    39de:	a0 93 84 01 	sts	0x0184, r26
    39e2:	b0 93 85 01 	sts	0x0185, r27
    39e6:	f9 01       	movw	r30, r18
    39e8:	ef 5f       	subi	r30, 0xFF	; 255
    39ea:	fe 4f       	sbci	r31, 0xFE	; 254
			do {
	 	        EEARL = address;			// Setup EEPROM address
    39ec:	80 91 82 01 	lds	r24, 0x0182
    39f0:	81 bd       	out	0x21, r24	; 33
	            EEARH = (address >> 8);
    39f2:	80 91 82 01 	lds	r24, 0x0182
    39f6:	90 91 83 01 	lds	r25, 0x0183
    39fa:	a0 91 84 01 	lds	r26, 0x0184
    39fe:	b0 91 85 01 	lds	r27, 0x0185
    3a02:	29 2f       	mov	r18, r25
    3a04:	3a 2f       	mov	r19, r26
    3a06:	4b 2f       	mov	r20, r27
    3a08:	55 27       	eor	r21, r21
    3a0a:	22 bd       	out	0x22, r18	; 34
				address++;					// Select next byte
    3a0c:	01 96       	adiw	r24, 0x01	; 1
    3a0e:	a1 1d       	adc	r26, r1
    3a10:	b1 1d       	adc	r27, r1
    3a12:	80 93 82 01 	sts	0x0182, r24
    3a16:	90 93 83 01 	sts	0x0183, r25
    3a1a:	a0 93 84 01 	sts	0x0184, r26
    3a1e:	b0 93 85 01 	sts	0x0185, r27
				EEDR=gBuffer[cnt++];
    3a22:	31 96       	adiw	r30, 0x01	; 1
    3a24:	80 81       	ld	r24, Z
    3a26:	80 bd       	out	0x20, r24	; 32
				
	            EECR |= (1<<EEMWE);			// Write data into EEPROM
    3a28:	fa 9a       	sbi	0x1f, 2	; 31
	            EECR |= (1<<EEWE);
    3a2a:	f9 9a       	sbi	0x1f, 1	; 31
	            
				while (EECR & (1<<EEWE));	// Wait for EEPROM write to finish
    3a2c:	f9 99       	sbic	0x1f, 1	; 31
    3a2e:	fe cf       	rjmp	.-4      	; 0x3a2c
				size--;						// Decreas number of bytes to write
    3a30:	01 50       	subi	r16, 0x01	; 1
    3a32:	10 40       	sbci	r17, 0x00	; 0
			} while(size);					// Loop until all bytes written
    3a34:	d9 f6       	brne	.-74     	; 0x39ec

		}

		return '\r';						// Report programming OK
    3a36:	8d e0       	ldi	r24, 0x0D	; 13
    3a38:	90 e0       	ldi	r25, 0x00	; 0
    3a3a:	01 c0       	rjmp	.+2      	; 0x3a3e

	}
	
	return 0;								// Report programming failed
    3a3c:	ca 01       	movw	r24, r20
    3a3e:	df 91       	pop	r29
    3a40:	cf 91       	pop	r28
    3a42:	1f 91       	pop	r17
    3a44:	0f 91       	pop	r16
    3a46:	ff 90       	pop	r15
    3a48:	ef 90       	pop	r14
    3a4a:	df 90       	pop	r13
    3a4c:	cf 90       	pop	r12
    3a4e:	bf 90       	pop	r11
    3a50:	08 95       	ret

00003a52 <BlockRead>:
}

void BlockRead(unsigned int size, unsigned char mem)
{
    3a52:	0f 93       	push	r16
    3a54:	1f 93       	push	r17
    3a56:	cf 93       	push	r28
    3a58:	df 93       	push	r29
    3a5a:	ec 01       	movw	r28, r24
	unsigned int data;
	
	my_eeprom_busy_wait();
    3a5c:	f9 99       	sbic	0x1f, 1	; 31
    3a5e:	fe cf       	rjmp	.-4      	; 0x3a5c
	
	if (mem == 'E')							// Read EEPROM
    3a60:	65 34       	cpi	r22, 0x45	; 69
    3a62:	11 f5       	brne	.+68     	; 0x3aa8
	{
		// address>>=1; // not needed here - hmm, somehow inconsistant TODO
		do {
			EEARL = address;				// Setup EEPROM address
    3a64:	80 91 82 01 	lds	r24, 0x0182
    3a68:	81 bd       	out	0x21, r24	; 33
			EEARH = (address >> 8);
    3a6a:	80 91 82 01 	lds	r24, 0x0182
    3a6e:	90 91 83 01 	lds	r25, 0x0183
    3a72:	a0 91 84 01 	lds	r26, 0x0184
    3a76:	b0 91 85 01 	lds	r27, 0x0185
    3a7a:	29 2f       	mov	r18, r25
    3a7c:	3a 2f       	mov	r19, r26
    3a7e:	4b 2f       	mov	r20, r27
    3a80:	55 27       	eor	r21, r21
    3a82:	22 bd       	out	0x22, r18	; 34
			address++;						// Select next EEPROM byte
    3a84:	01 96       	adiw	r24, 0x01	; 1
    3a86:	a1 1d       	adc	r26, r1
    3a88:	b1 1d       	adc	r27, r1
    3a8a:	80 93 82 01 	sts	0x0182, r24
    3a8e:	90 93 83 01 	sts	0x0183, r25
    3a92:	a0 93 84 01 	sts	0x0184, r26
    3a96:	b0 93 85 01 	sts	0x0185, r27
			EECR |= (1<<EERE);				// Read EEPROM
    3a9a:	f8 9a       	sbi	0x1f, 0	; 31
			sendchar(EEDR);					// Transmit EEPROM data to PC
    3a9c:	80 b5       	in	r24, 0x20	; 32
    3a9e:	0e 94 94 1e 	call	0x3d28
			size--;							// Decrease number of bytes to read
    3aa2:	21 97       	sbiw	r28, 0x01	; 1
		} while (size);					// Repeat until all block has been read
    3aa4:	f9 f6       	brne	.-66     	; 0x3a64
    3aa6:	22 c0       	rjmp	.+68     	; 0x3aec
	}
	else									// Read Flash
	{
		do {
#if defined(RAMPZ)
			data = pgm_read_word_far(address);
#else
			data = pgm_read_word_near((uint16_t)address);
    3aa8:	e0 91 82 01 	lds	r30, 0x0182
    3aac:	f0 91 83 01 	lds	r31, 0x0183
    3ab0:	05 91       	lpm	r16, Z+
    3ab2:	14 91       	lpm	r17, Z
#endif
			sendchar((unsigned char)data);		//send LSB
    3ab4:	80 2f       	mov	r24, r16
    3ab6:	0e 94 94 1e 	call	0x3d28
			sendchar((unsigned char)(data >> 8));	//send MSB  
    3aba:	81 2f       	mov	r24, r17
    3abc:	99 27       	eor	r25, r25
    3abe:	0e 94 94 1e 	call	0x3d28
			address += 2;  					// Select next word in memory
    3ac2:	80 91 82 01 	lds	r24, 0x0182
    3ac6:	90 91 83 01 	lds	r25, 0x0183
    3aca:	a0 91 84 01 	lds	r26, 0x0184
    3ace:	b0 91 85 01 	lds	r27, 0x0185
    3ad2:	02 96       	adiw	r24, 0x02	; 2
    3ad4:	a1 1d       	adc	r26, r1
    3ad6:	b1 1d       	adc	r27, r1
    3ad8:	80 93 82 01 	sts	0x0182, r24
    3adc:	90 93 83 01 	sts	0x0183, r25
    3ae0:	a0 93 84 01 	sts	0x0184, r26
    3ae4:	b0 93 85 01 	sts	0x0185, r27
			size -= 2;						// Subtract two bytes from number of bytes to read
    3ae8:	22 97       	sbiw	r28, 0x02	; 2
		} while (size);					// Repeat until all block has been read
    3aea:	f1 f6       	brne	.-68     	; 0x3aa8
    3aec:	df 91       	pop	r29
    3aee:	cf 91       	pop	r28
    3af0:	1f 91       	pop	r17
    3af2:	0f 91       	pop	r16
    3af4:	08 95       	ret

00003af6 <main>:
    3af6:	cf ef       	ldi	r28, 0xFF	; 255
    3af8:	d4 e0       	ldi	r29, 0x04	; 4
    3afa:	de bf       	out	0x3e, r29	; 62
    3afc:	cd bf       	out	0x3d, r28	; 61
    3afe:	f8 94       	cli
    3b00:	81 e0       	ldi	r24, 0x01	; 1
    3b02:	85 bf       	out	0x35, r24	; 53
    3b04:	82 e0       	ldi	r24, 0x02	; 2
    3b06:	85 bf       	out	0x35, r24	; 53
    3b08:	60 e0       	ldi	r22, 0x00	; 0
    3b0a:	89 e1       	ldi	r24, 0x19	; 25
    3b0c:	90 e0       	ldi	r25, 0x00	; 0
    3b0e:	0e 94 86 1e 	call	0x3d0c
    3b12:	38 98       	cbi	0x07, 0	; 7
    3b14:	40 9a       	sbi	0x08, 0	; 8
    3b16:	0e 94 b4 1e 	call	0x3d68
    3b1a:	68 2f       	mov	r22, r24
    3b1c:	81 36       	cpi	r24, 0x61	; 97
    3b1e:	11 f4       	brne	.+4      	; 0x3b24
    3b20:	89 e5       	ldi	r24, 0x59	; 89
    3b22:	f1 c0       	rjmp	.+482    	; 0x3d06
    3b24:	81 34       	cpi	r24, 0x41	; 65
    3b26:	39 f5       	brne	.+78     	; 0x3b76
    3b28:	0e 94 b4 1e 	call	0x3d68
    3b2c:	99 27       	eor	r25, r25
    3b2e:	aa 27       	eor	r26, r26
    3b30:	bb 27       	eor	r27, r27
    3b32:	80 93 82 01 	sts	0x0182, r24
    3b36:	90 93 83 01 	sts	0x0183, r25
    3b3a:	a0 93 84 01 	sts	0x0184, r26
    3b3e:	b0 93 85 01 	sts	0x0185, r27
    3b42:	ee 24       	eor	r14, r14
    3b44:	f8 2e       	mov	r15, r24
    3b46:	09 2f       	mov	r16, r25
    3b48:	1a 2f       	mov	r17, r26
    3b4a:	0e 94 b4 1e 	call	0x3d68
    3b4e:	99 27       	eor	r25, r25
    3b50:	aa 27       	eor	r26, r26
    3b52:	bb 27       	eor	r27, r27
    3b54:	e8 2a       	or	r14, r24
    3b56:	f9 2a       	or	r15, r25
    3b58:	0a 2b       	or	r16, r26
    3b5a:	1b 2b       	or	r17, r27
    3b5c:	ee 0c       	add	r14, r14
    3b5e:	ff 1c       	adc	r15, r15
    3b60:	00 1f       	adc	r16, r16
    3b62:	11 1f       	adc	r17, r17
    3b64:	e0 92 82 01 	sts	0x0182, r14
    3b68:	f0 92 83 01 	sts	0x0183, r15
    3b6c:	00 93 84 01 	sts	0x0184, r16
    3b70:	10 93 85 01 	sts	0x0185, r17
    3b74:	68 c0       	rjmp	.+208    	; 0x3c46
    3b76:	82 36       	cpi	r24, 0x62	; 98
    3b78:	41 f4       	brne	.+16     	; 0x3b8a
    3b7a:	89 e5       	ldi	r24, 0x59	; 89
    3b7c:	0e 94 94 1e 	call	0x3d28
    3b80:	80 e0       	ldi	r24, 0x00	; 0
    3b82:	0e 94 94 1e 	call	0x3d28
    3b86:	80 e8       	ldi	r24, 0x80	; 128
    3b88:	be c0       	rjmp	.+380    	; 0x3d06
    3b8a:	82 34       	cpi	r24, 0x42	; 66
    3b8c:	89 f4       	brne	.+34     	; 0x3bb0
    3b8e:	0e 94 b4 1e 	call	0x3d68
    3b92:	99 27       	eor	r25, r25
    3b94:	18 2f       	mov	r17, r24
    3b96:	00 27       	eor	r16, r16
    3b98:	0e 94 b4 1e 	call	0x3d68
    3b9c:	99 27       	eor	r25, r25
    3b9e:	08 2b       	or	r16, r24
    3ba0:	19 2b       	or	r17, r25
    3ba2:	0e 94 b4 1e 	call	0x3d68
    3ba6:	68 2f       	mov	r22, r24
    3ba8:	c8 01       	movw	r24, r16
    3baa:	0e 94 67 1c 	call	0x38ce
    3bae:	ab c0       	rjmp	.+342    	; 0x3d06
    3bb0:	87 36       	cpi	r24, 0x67	; 103
    3bb2:	89 f4       	brne	.+34     	; 0x3bd6
    3bb4:	0e 94 b4 1e 	call	0x3d68
    3bb8:	99 27       	eor	r25, r25
    3bba:	18 2f       	mov	r17, r24
    3bbc:	00 27       	eor	r16, r16
    3bbe:	0e 94 b4 1e 	call	0x3d68
    3bc2:	99 27       	eor	r25, r25
    3bc4:	08 2b       	or	r16, r24
    3bc6:	19 2b       	or	r17, r25
    3bc8:	0e 94 b4 1e 	call	0x3d68
    3bcc:	68 2f       	mov	r22, r24
    3bce:	c8 01       	movw	r24, r16
    3bd0:	0e 94 29 1d 	call	0x3a52
    3bd4:	a0 cf       	rjmp	.-192    	; 0x3b16
    3bd6:	85 36       	cpi	r24, 0x65	; 101
    3bd8:	09 f0       	breq	.+2      	; 0x3bdc
    3bda:	37 c0       	rjmp	.+110    	; 0x3c4a
    3bdc:	80 91 86 01 	lds	r24, 0x0186
    3be0:	85 37       	cpi	r24, 0x75	; 117
    3be2:	69 f5       	brne	.+90     	; 0x3c3e
    3be4:	10 92 82 01 	sts	0x0182, r1
    3be8:	10 92 83 01 	sts	0x0183, r1
    3bec:	10 92 84 01 	sts	0x0184, r1
    3bf0:	10 92 85 01 	sts	0x0185, r1
    3bf4:	23 e0       	ldi	r18, 0x03	; 3
    3bf6:	80 91 82 01 	lds	r24, 0x0182
    3bfa:	90 91 83 01 	lds	r25, 0x0183
    3bfe:	fc 01       	movw	r30, r24
    3c00:	20 93 57 00 	sts	0x0057, r18
    3c04:	e8 95       	spm
    3c06:	07 b6       	in	r0, 0x37	; 55
    3c08:	00 fc       	sbrc	r0, 0
    3c0a:	fd cf       	rjmp	.-6      	; 0x3c06
    3c0c:	80 91 82 01 	lds	r24, 0x0182
    3c10:	90 91 83 01 	lds	r25, 0x0183
    3c14:	a0 91 84 01 	lds	r26, 0x0184
    3c18:	b0 91 85 01 	lds	r27, 0x0185
    3c1c:	80 58       	subi	r24, 0x80	; 128
    3c1e:	9f 4f       	sbci	r25, 0xFF	; 255
    3c20:	af 4f       	sbci	r26, 0xFF	; 255
    3c22:	bf 4f       	sbci	r27, 0xFF	; 255
    3c24:	80 93 82 01 	sts	0x0182, r24
    3c28:	90 93 83 01 	sts	0x0183, r25
    3c2c:	a0 93 84 01 	sts	0x0184, r26
    3c30:	b0 93 85 01 	sts	0x0185, r27
    3c34:	80 50       	subi	r24, 0x00	; 0
    3c36:	98 43       	sbci	r25, 0x38	; 56
    3c38:	a0 40       	sbci	r26, 0x00	; 0
    3c3a:	b0 40       	sbci	r27, 0x00	; 0
    3c3c:	e0 f2       	brcs	.-72     	; 0x3bf6
    3c3e:	81 e1       	ldi	r24, 0x11	; 17
    3c40:	80 93 57 00 	sts	0x0057, r24
    3c44:	e8 95       	spm
    3c46:	8d e0       	ldi	r24, 0x0D	; 13
    3c48:	5e c0       	rjmp	.+188    	; 0x3d06
    3c4a:	85 34       	cpi	r24, 0x45	; 69
    3c4c:	61 f4       	brne	.+24     	; 0x3c66
    3c4e:	88 e1       	ldi	r24, 0x18	; 24
    3c50:	90 e0       	ldi	r25, 0x00	; 0
    3c52:	28 e0       	ldi	r18, 0x08	; 8
    3c54:	0f b6       	in	r0, 0x3f	; 63
    3c56:	f8 94       	cli
    3c58:	a8 95       	wdr
    3c5a:	80 93 60 00 	sts	0x0060, r24
    3c5e:	0f be       	out	0x3f, r0	; 63
    3c60:	20 93 60 00 	sts	0x0060, r18
    3c64:	f0 cf       	rjmp	.-32     	; 0x3c46
    3c66:	80 35       	cpi	r24, 0x50	; 80
    3c68:	71 f3       	breq	.-36     	; 0x3c46
    3c6a:	8c 34       	cpi	r24, 0x4C	; 76
    3c6c:	61 f3       	breq	.-40     	; 0x3c46
    3c6e:	80 37       	cpi	r24, 0x70	; 112
    3c70:	11 f4       	brne	.+4      	; 0x3c76
    3c72:	83 e5       	ldi	r24, 0x53	; 83
    3c74:	48 c0       	rjmp	.+144    	; 0x3d06
    3c76:	86 34       	cpi	r24, 0x46	; 70
    3c78:	21 f4       	brne	.+8      	; 0x3c82
    3c7a:	69 e0       	ldi	r22, 0x09	; 9
    3c7c:	80 e0       	ldi	r24, 0x00	; 0
    3c7e:	90 e0       	ldi	r25, 0x00	; 0
    3c80:	05 c0       	rjmp	.+10     	; 0x3c8c
    3c82:	82 37       	cpi	r24, 0x72	; 114
    3c84:	31 f4       	brne	.+12     	; 0x3c92
    3c86:	69 e0       	ldi	r22, 0x09	; 9
    3c88:	81 e0       	ldi	r24, 0x01	; 1
    3c8a:	90 e0       	ldi	r25, 0x00	; 0
    3c8c:	0e 94 d0 1e 	call	0x3da0
    3c90:	3a c0       	rjmp	.+116    	; 0x3d06
    3c92:	8e 34       	cpi	r24, 0x4E	; 78
    3c94:	21 f4       	brne	.+8      	; 0x3c9e
    3c96:	69 e0       	ldi	r22, 0x09	; 9
    3c98:	83 e0       	ldi	r24, 0x03	; 3
    3c9a:	90 e0       	ldi	r25, 0x00	; 0
    3c9c:	f7 cf       	rjmp	.-18     	; 0x3c8c
    3c9e:	81 35       	cpi	r24, 0x51	; 81
    3ca0:	21 f4       	brne	.+8      	; 0x3caa
    3ca2:	69 e0       	ldi	r22, 0x09	; 9
    3ca4:	82 e0       	ldi	r24, 0x02	; 2
    3ca6:	90 e0       	ldi	r25, 0x00	; 0
    3ca8:	f1 cf       	rjmp	.-30     	; 0x3c8c
    3caa:	84 37       	cpi	r24, 0x74	; 116
    3cac:	29 f4       	brne	.+10     	; 0x3cb8
    3cae:	85 e7       	ldi	r24, 0x75	; 117
    3cb0:	0e 94 94 1e 	call	0x3d28
    3cb4:	80 e0       	ldi	r24, 0x00	; 0
    3cb6:	27 c0       	rjmp	.+78     	; 0x3d06
    3cb8:	88 57       	subi	r24, 0x78	; 120
    3cba:	82 30       	cpi	r24, 0x02	; 2
    3cbc:	18 f4       	brcc	.+6      	; 0x3cc4
    3cbe:	0e 94 b4 1e 	call	0x3d68
    3cc2:	c1 cf       	rjmp	.-126    	; 0x3c46
    3cc4:	64 35       	cpi	r22, 0x54	; 84
    3cc6:	29 f4       	brne	.+10     	; 0x3cd2
    3cc8:	0e 94 b4 1e 	call	0x3d68
    3ccc:	80 93 86 01 	sts	0x0186, r24
    3cd0:	ba cf       	rjmp	.-140    	; 0x3c46
    3cd2:	63 35       	cpi	r22, 0x53	; 83
    3cd4:	19 f4       	brne	.+6      	; 0x3cdc
    3cd6:	0e 94 51 1c 	call	0x38a2
    3cda:	1d cf       	rjmp	.-454    	; 0x3b16
    3cdc:	66 35       	cpi	r22, 0x56	; 86
    3cde:	29 f4       	brne	.+10     	; 0x3cea
    3ce0:	80 e3       	ldi	r24, 0x30	; 48
    3ce2:	0e 94 94 1e 	call	0x3d28
    3ce6:	87 e3       	ldi	r24, 0x37	; 55
    3ce8:	0e c0       	rjmp	.+28     	; 0x3d06
    3cea:	63 37       	cpi	r22, 0x73	; 115
    3cec:	41 f4       	brne	.+16     	; 0x3cfe
    3cee:	86 e0       	ldi	r24, 0x06	; 6
    3cf0:	0e 94 94 1e 	call	0x3d28
    3cf4:	84 e9       	ldi	r24, 0x94	; 148
    3cf6:	0e 94 94 1e 	call	0x3d28
    3cfa:	8e e1       	ldi	r24, 0x1E	; 30
    3cfc:	04 c0       	rjmp	.+8      	; 0x3d06
    3cfe:	6b 31       	cpi	r22, 0x1B	; 27
    3d00:	09 f4       	brne	.+2      	; 0x3d04
    3d02:	09 cf       	rjmp	.-494    	; 0x3b16
    3d04:	8f e3       	ldi	r24, 0x3F	; 63
    3d06:	0e 94 94 1e 	call	0x3d28
    3d0a:	05 cf       	rjmp	.-502    	; 0x3b16

00003d0c <USART_Init>:
 #error "Processor type not supported in uart.c !"
#endif

void USART_Init(unsigned int baudrate, unsigned char doublespeed)
{
    3d0c:	9c 01       	movw	r18, r24
    // Set baud rate
    UART0_UBRR_HIGH = (unsigned char)(baudrate>>8);
    3d0e:	83 2f       	mov	r24, r19
    3d10:	99 27       	eor	r25, r25
    3d12:	80 93 c5 00 	sts	0x00C5, r24
    UART0_UBRR_LOW  = (unsigned char)baudrate;
    3d16:	20 93 c4 00 	sts	0x00C4, r18

    // Enable 2x speed - TODO adopt to all uCs
	#ifdef UART0_DOUBLEAVAIL
    if (doublespeed) UCSR0A = (1<<U2X0);
	#endif

#if defined (ATMEGA_USART)
    /* Enable USART receiver and transmitter and disable interrupts */
    UART0_CONTROL = (1<<RXEN)|(1<<TXEN)|(0<<RXCIE)|(0<<UDRIE);
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef URSEL
    UCSRC = (1<<URSEL)|(3<<UCSZ0);
    #else
    UCSRC = (3<<UCSZ0);
    #endif 
    
#elif defined (ATMEGA_USART0 )
    /* Enable USART receiver and transmitter and disable interrupts */
    UART0_CONTROL = (1<<RXEN0)|(1<<TXEN0)|(0<<RXCIE0)|(0<<UDRIE0);
    3d1a:	88 e1       	ldi	r24, 0x18	; 24
    3d1c:	80 93 c1 00 	sts	0x00C1, r24
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef URSEL0
    UCSR0C = (1<<URSEL0)|(3<<UCSZ00);
    #else
    UCSR0C = (3<<UCSZ00);
    3d20:	86 e0       	ldi	r24, 0x06	; 6
    3d22:	80 93 c2 00 	sts	0x00C2, r24
    3d26:	08 95       	ret

00003d28 <sendchar>:
    #endif 
#endif
    
}

void sendchar(char data)
{
    int i = 0;
    3d28:	20 e0       	ldi	r18, 0x00	; 0
    3d2a:	30 e0       	ldi	r19, 0x00	; 0
    
    UART0_DATA  = data;
    3d2c:	80 93 c6 00 	sts	0x00C6, r24
    
    if(SREG & 0x80)
    3d30:	0f b6       	in	r0, 0x3f	; 63
    3d32:	07 fe       	sbrs	r0, 7
    3d34:	0f c0       	rjmp	.+30     	; 0x3d54
    {
		while ( !(UART0_STATUS&0x40) && (i<10000) )
		{
			i++;
    3d36:	80 91 c0 00 	lds	r24, 0x00C0
    3d3a:	86 fd       	sbrc	r24, 6
    3d3c:	0f c0       	rjmp	.+30     	; 0x3d5c
    3d3e:	2f 5f       	subi	r18, 0xFF	; 255
    3d40:	3f 4f       	sbci	r19, 0xFF	; 255
    3d42:	80 91 c0 00 	lds	r24, 0x00C0
    3d46:	86 fd       	sbrc	r24, 6
    3d48:	09 c0       	rjmp	.+18     	; 0x3d5c
    3d4a:	87 e2       	ldi	r24, 0x27	; 39
    3d4c:	20 31       	cpi	r18, 0x10	; 16
    3d4e:	38 07       	cpc	r19, r24
    3d50:	b4 f3       	brlt	.-20     	; 0x3d3e
    3d52:	04 c0       	rjmp	.+8      	; 0x3d5c
		}
    }
    else 
        while( !(UART0_STATUS&0x40) );
    3d54:	80 91 c0 00 	lds	r24, 0x00C0
    3d58:	86 ff       	sbrs	r24, 6
    3d5a:	fc cf       	rjmp	.-8      	; 0x3d54
        
    UART0_STATUS=UART0_STATUS|0x40;                             //delete TXCflag
    3d5c:	80 91 c0 00 	lds	r24, 0x00C0
    3d60:	80 64       	ori	r24, 0x40	; 64
    3d62:	80 93 c0 00 	sts	0x00C0, r24
    3d66:	08 95       	ret

00003d68 <recchar>:
}


char recchar(void)
{
    int i = 0;
    3d68:	20 e0       	ldi	r18, 0x00	; 0
    3d6a:	30 e0       	ldi	r19, 0x00	; 0
    
    if(SREG & 0x80)
    3d6c:	0f b6       	in	r0, 0x3f	; 63
    3d6e:	07 fe       	sbrs	r0, 7
    3d70:	0f c0       	rjmp	.+30     	; 0x3d90
    {
		// while (!(UART0_STATUS & (1<<RXC0)) && (i<10000))
		while (!(UART0_STATUS & 0x80) && (i<10000))
		{
			i++;
    3d72:	80 91 c0 00 	lds	r24, 0x00C0
    3d76:	87 fd       	sbrc	r24, 7
    3d78:	0f c0       	rjmp	.+30     	; 0x3d98
    3d7a:	2f 5f       	subi	r18, 0xFF	; 255
    3d7c:	3f 4f       	sbci	r19, 0xFF	; 255
    3d7e:	80 91 c0 00 	lds	r24, 0x00C0
    3d82:	87 fd       	sbrc	r24, 7
    3d84:	09 c0       	rjmp	.+18     	; 0x3d98
    3d86:	87 e2       	ldi	r24, 0x27	; 39
    3d88:	20 31       	cpi	r18, 0x10	; 16
    3d8a:	38 07       	cpc	r19, r24
    3d8c:	b4 f3       	brlt	.-20     	; 0x3d7a
    3d8e:	04 c0       	rjmp	.+8      	; 0x3d98
		}
    }
    else
        // while(!(UART0_STATUS & (1<<RXC0)));
		while(!(UART0_STATUS & 0x80));
    3d90:	80 91 c0 00 	lds	r24, 0x00C0
    3d94:	88 23       	and	r24, r24
    3d96:	e4 f7       	brge	.-8      	; 0x3d90
        
    return UART0_DATA ;
    3d98:	80 91 c6 00 	lds	r24, 0x00C6
}
    3d9c:	99 27       	eor	r25, r25
    3d9e:	08 95       	ret

00003da0 <read_fuse_lock>:
unsigned char read_fuse_lock(unsigned short addr, unsigned char mode)
{
	unsigned char retval;
	
	asm volatile
    3da0:	fc 01       	movw	r30, r24
    3da2:	60 93 57 00 	sts	0x0057, r22
    3da6:	c8 95       	lpm
    3da8:	80 2d       	mov	r24, r0
	(
		"movw r30, %3\n\t" /* Z to addr */ \
		"sts %0, %2\n\t" /* set mode in SPM_REG */ \
		"lpm\n\t"  /* load fuse/lock value into r0 */ \
		"mov %1,r0\n\t" /* save return value */ \
		: "=m" (SPM_REG),
		  "=r" (retval)
		: "r" (mode),
		  "r" (addr)
		: "r30", "r31", "r0"
	);
	return retval;
}
    3daa:	99 27       	eor	r25, r25
    3dac:	08 95       	ret
