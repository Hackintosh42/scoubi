<AVRPART><MODULE_LIST>[ADMIN:CORE:INTERRUPT_VECTOR:MEMORY:PACKAGE:IO_MODULE:ICE_SETTINGS]</MODULE_LIST><ADMIN>
		<PART_NAME>ATtiny22</PART_NAME>
		<SPEED>1MHZ</SPEED>
		<BUILD>59</BUILD>
		<RELEASE_STATUS>RELEASED</RELEASE_STATUS>
		<SIGNATURE>
			<ADDR000>$1E</ADDR000>
			<ADDR001>$91</ADDR001>
			<ADDR002>$06</ADDR002>
		</SIGNATURE>
	</ADMIN>
	<CORE>
		<CORE_VERSION>V1</CORE_VERSION>
		<ID>AVRSimCoreV1.SimCoreV1</ID>
		<NEW_INSTRUCTIONS>[]</NEW_INSTRUCTIONS>
		<INSTRUCTIONS_NOT_SUPPORTED>[]</INSTRUCTIONS_NOT_SUPPORTED>
		<RAMP_REGISTERS>[0x0023:0x0034:0x0054]</RAMP_REGISTERS>
		<GP_REG_FILE>
			<NMB_REG>32</NMB_REG>
			<START_ADDR>$00</START_ADDR>
			<X_REG_HIGH>$1B</X_REG_HIGH>
			<X_REG_LOW>$1A</X_REG_LOW>
			<Y_REG_HIGH>$1D</Y_REG_HIGH>
			<Y_REG_LOW>$1C</Y_REG_LOW>
			<Z_REG_HIGH>$1F</Z_REG_HIGH>
			<Z_REG_LOW>$1E</Z_REG_LOW>
		</GP_REG_FILE>
	</CORE>
	<INTERRUPT_VECTOR>
		<NMB_VECTORS>3</NMB_VECTORS>
		<VECTOR1>
			<PROGRAM_ADDRESS>$000</PROGRAM_ADDRESS>
			<SOURCE>RESET</SOURCE>
			<DEFINITION>External Reset, Power-on Reset and Watchdog Reset</DEFINITION>
		</VECTOR1>
		<VECTOR2>
			<PROGRAM_ADDRESS>$001</PROGRAM_ADDRESS>
			<SOURCE>INT0</SOURCE>
			<DEFINITION>External Interrupt 0</DEFINITION>
		</VECTOR2>
		<VECTOR3>
			<PROGRAM_ADDRESS>$002</PROGRAM_ADDRESS>
			<SOURCE>TIMER0_OVF0</SOURCE>
			<DEFINITION>Timer/Counter0 Overflow</DEFINITION>
		</VECTOR3>
	</INTERRUPT_VECTOR>
	<MEMORY>
		<ID>AVRSimMemory8bit.SimMemory8bit</ID>
		<PROG_FLASH>2048</PROG_FLASH>
		<EEPROM>128</EEPROM>
		<INT_SRAM>
			<SIZE>128</SIZE>
			<START_ADDR>$60</START_ADDR>
		</INT_SRAM>
		<EXT_SRAM>
			<SIZE>0</SIZE>
			<START_ADDR>NA</START_ADDR>
		</EXT_SRAM>
		<IO_MEMORY>
			<IO_START_ADDR>$00</IO_START_ADDR>
			<IO_STOP_ADDR>$3F</IO_STOP_ADDR>
			<EXT_IO_START_ADDR>NA</EXT_IO_START_ADDR>
			<EXT_IO_STOP_ADDR>NA</EXT_IO_STOP_ADDR>
			<MEM_START_ADDR>$20</MEM_START_ADDR>
			<MEM_STOP_ADDR>$5F</MEM_STOP_ADDR>
			<SREG>
				<IO_ADDR>$3F</IO_ADDR>
				<MEM_ADDR>$5F</MEM_ADDR>
				<C_MASK>0x01</C_MASK><Z_MASK>0x02</Z_MASK><N_MASK>0x04</N_MASK><V_MASK>0x08</V_MASK><S_MASK>0x10</S_MASK><H_MASK>0x20</H_MASK><T_MASK>0x40</T_MASK><I_MASK>0x80</I_MASK></SREG>
			<SPL>
				<IO_ADDR>$3D</IO_ADDR>
				<MEM_ADDR>$5D</MEM_ADDR>
				<SP0_MASK>0x01</SP0_MASK><SP1_MASK>0x02</SP1_MASK><SP2_MASK>0x04</SP2_MASK><SP3_MASK>0x08</SP3_MASK><SP4_MASK>0x10</SP4_MASK><SP5_MASK>0x20</SP5_MASK><SP6_MASK>0x40</SP6_MASK><SP7_MASK>0x80</SP7_MASK></SPL>
			<GIMSK>
				<IO_ADDR>$3B</IO_ADDR>
				<MEM_ADDR>$5B</MEM_ADDR>
			</GIMSK>
			<GIFR>
				<IO_ADDR>$3A</IO_ADDR>
				<MEM_ADDR>$5A</MEM_ADDR>
			</GIFR>
			<TIMSK>
				<IO_ADDR>$39</IO_ADDR>
				<MEM_ADDR>$59</MEM_ADDR>
				<TOIE0_MASK>0x02</TOIE0_MASK></TIMSK>
			<TIFR>
				<IO_ADDR>$38</IO_ADDR>
				<MEM_ADDR>$58</MEM_ADDR>
				<TOV0_MASK>0x02</TOV0_MASK></TIFR>
			<MCUCR>
				<IO_ADDR>$35</IO_ADDR>
				<MEM_ADDR>$55</MEM_ADDR>
				<ISC00_MASK>0x01</ISC00_MASK><ISC01_MASK>0x02</ISC01_MASK><SM_MASK>0x10</SM_MASK><SE_MASK>0x20</SE_MASK></MCUCR>
			<MCUSR>
				<IO_ADDR>$34</IO_ADDR>
				<MEM_ADDR>$54</MEM_ADDR>
				<PORF_MASK>0x01</PORF_MASK><EXTRF_MASK>0x02</EXTRF_MASK></MCUSR>
			<TCCR0>
				<IO_ADDR>$33</IO_ADDR>
				<MEM_ADDR>$53</MEM_ADDR>
				<CS00_MASK>0x01</CS00_MASK><CS01_MASK>0x02</CS01_MASK><CS02_MASK>0x04</CS02_MASK></TCCR0>
			<TCNT0>
				<IO_ADDR>$32</IO_ADDR>
				<MEM_ADDR>$52</MEM_ADDR>
				<TCNT00_MASK>0x01</TCNT00_MASK><TCNT01_MASK>0x02</TCNT01_MASK><TCNT02_MASK>0x04</TCNT02_MASK><TCNT03_MASK>0x08</TCNT03_MASK><TCNT04_MASK>0x10</TCNT04_MASK><TCNT05_MASK>0x20</TCNT05_MASK><TCNT06_MASK>0x40</TCNT06_MASK><TCNT07_MASK>0x80</TCNT07_MASK></TCNT0>
			<WDTCR>
				<IO_ADDR>$21</IO_ADDR>
				<MEM_ADDR>$41</MEM_ADDR>
				<WDP0_MASK>0x01</WDP0_MASK><WDP1_MASK>0x02</WDP1_MASK><WDP2_MASK>0x04</WDP2_MASK><WDE_MASK>0x08</WDE_MASK><WDTOE_MASK>0x10</WDTOE_MASK></WDTCR>
			<EEAR>
				<IO_ADDR>$1E</IO_ADDR>
				<MEM_ADDR>$3E</MEM_ADDR>
				<EEAR0_MASK>0x01</EEAR0_MASK><EEAR1_MASK>0x02</EEAR1_MASK><EEAR2_MASK>0x04</EEAR2_MASK><EEAR3_MASK>0x08</EEAR3_MASK><EEAR4_MASK>0x10</EEAR4_MASK><EEAR5_MASK>0x20</EEAR5_MASK><EEAR6_MASK>0x40</EEAR6_MASK><EEAR7_MASK>0x80</EEAR7_MASK></EEAR>
			<EEDR>
				<IO_ADDR>$1D</IO_ADDR>
				<MEM_ADDR>$3D</MEM_ADDR>
				<EEDR0_MASK>0x01</EEDR0_MASK><EEDR1_MASK>0x02</EEDR1_MASK><EEDR2_MASK>0x04</EEDR2_MASK><EEDR3_MASK>0x08</EEDR3_MASK><EEDR4_MASK>0x10</EEDR4_MASK><EEDR5_MASK>0x20</EEDR5_MASK><EEDR6_MASK>0x40</EEDR6_MASK><EEDR7_MASK>0x80</EEDR7_MASK></EEDR>
			<EECR>
				<IO_ADDR>$1C</IO_ADDR>
				<MEM_ADDR>$3C</MEM_ADDR>
				<EERE_MASK>0x01</EERE_MASK><EEWE_MASK>0x02</EEWE_MASK><EEMWE_MASK>0x04</EEMWE_MASK></EECR>
			<PORTB>
				<IO_ADDR>$18</IO_ADDR>
				<MEM_ADDR>$38</MEM_ADDR>
				<MASK>$1f</MASK>
				<PORTB0_MASK>0x01</PORTB0_MASK><PORTB1_MASK>0x02</PORTB1_MASK><PORTB2_MASK>0x04</PORTB2_MASK><PORTB3_MASK>0x08</PORTB3_MASK><PORTB4_MASK>0x10</PORTB4_MASK></PORTB>
			<DDRB>
				<IO_ADDR>$17</IO_ADDR>
				<MEM_ADDR>$37</MEM_ADDR>
				<DDRB0_MASK>0x01</DDRB0_MASK><DDRB1_MASK>0x02</DDRB1_MASK><DDRB2_MASK>0x04</DDRB2_MASK><DDRB3_MASK>0x08</DDRB3_MASK><DDRB4_MASK>0x10</DDRB4_MASK></DDRB>
			<PINB>
				<IO_ADDR>$16</IO_ADDR>
				<MEM_ADDR>$36</MEM_ADDR>
				<PINB0_MASK>0x01</PINB0_MASK><PINB1_MASK>0x02</PINB1_MASK><PINB2_MASK>0x04</PINB2_MASK><PINB3_MASK>0x08</PINB3_MASK><PINB4_MASK>0x10</PINB4_MASK></PINB>
		</IO_MEMORY>
	</MEMORY>
	<PACKAGE>
		<PACKAGES>[DIP]</PACKAGES>
		<DIP>
			<NMB_PIN>8</NMB_PIN>
			<PIN1>
				<NAME>['RESET]</NAME>
				<TEXT/>
			</PIN1>
			<PIN2>
				<NAME>[PB3:CLOCK]</NAME>
				<TEXT/>
			</PIN2>
			<PIN3>
				<NAME>[PB4]</NAME>
				<TEXT/>
			</PIN3>
			<PIN4>
				<NAME>[GND]</NAME>
				<TEXT/>
			</PIN4>
			<PIN5>
				<NAME>[PB0:MOSI]</NAME>
				<TEXT/>
			</PIN5>
			<PIN6>
				<NAME>[PB1:MISO:INT0]</NAME>
				<TEXT/>
			</PIN6>
			<PIN7>
				<NAME>[PB2:SCK:T0]</NAME>
				<TEXT/>
			</PIN7>
			<PIN8>
				<NAME>[VCC]</NAME>
				<TEXT/>
			</PIN8>
		</DIP>
	</PACKAGE>
	<IO_MODULE><MODULE_LIST>[CPU:TIMER_COUNTER_0:EEPROM:WATCHDOG:PORTB]</MODULE_LIST><CPU>
			<LIST>[SREG:SPL:MCUCR:MCUSR]</LIST>
			<LINK/>
			<ICON>io_cpu.com</ICON>
			<ID/>
			<TEXT/>
			<SREG>
				<NAME>SREG</NAME>
				<DESCRIPTION>Status Register</DESCRIPTION>
				<TEXT/>
				<IO_ADDR>$3F</IO_ADDR>
				<MEM_ADDR>$5F</MEM_ADDR>
				<ICON>io_sreg.bmp</ICON>
				<DISPLAY_BITS>Y</DISPLAY_BITS>
				<BIT7>
					<NAME>I</NAME>
					<DESCRIPTION>Global Interrupt Enable</DESCRIPTION>
					<TEXT>The global interrupt enable bit must be set (one) for the interrupts to be enabled. The individual interrupt enable control is then performed in separate control registers. If the global interrupt enable bit is cleared (zero), none of the interrupts are enabled independent of the individual interrupt enable settings. The I-bit is cleared by hardware after an interrupt has occurred, and is set by the RETI instruction to enable subsequent interrupts.</TEXT>
					<ACCESS>RW</ACCESS>
					<INIT_VAL>0</INIT_VAL>
				</BIT7>
				<BIT6>
					<NAME>T</NAME>
					<DESCRIPTION>Bit Copy Storage</DESCRIPTION>
					<TEXT>The bit copy instructions BLD (Bit LoaD) and BST (Bit STore) use the T bit as source and destination for the operated bit. A bit from a register in the register file can be copied into T by the BST instruction, and a bit in T can be copied into a bit in a register in the register file by the BLD instruction.</TEXT>
					<ACCESS>RW</ACCESS>
					<INIT_VAL>0</INIT_VAL>
				</BIT6>
				<BIT5>
					<NAME>H</NAME>
					<DESCRIPTION>Half Carry Flag</DESCRIPTION>
					<TEXT>The half carry flag H indicates a half carry in some arithmetic operations. See the Instruction Set Description for detailed information.</TEXT>
					<ACCESS>RW</ACCESS>
					<INIT_VAL>0</INIT_VAL>
				</BIT5>
				<BIT4>
					<NAME>S</NAME>
					<DESCRIPTION>Sign Bit</DESCRIPTION>
					<TEXT>The S-bit is always an exclusive or between the negative flag N and the two’s complement overflow flag V. See the Instruc-tion Set Description for detailed information.</TEXT>
					<ACCESS>RW</ACCESS>
					<INIT_VAL>0</INIT_VAL>
				</BIT4>
				<BIT3>
					<NAME>V</NAME>
					<DESCRIPTION>Two's Complement Overflow Flag</DESCRIPTION>
					<TEXT>The two’s complement overflow flag V supports two’s complement arithmetics. See the Instruction Set Description for detailed information.</TEXT>
					<ACCESS>RW</ACCESS>
					<INIT_VAL>0</INIT_VAL>
				</BIT3>
				<BIT2>
					<NAME>N</NAME>
					<DESCRIPTION>Negative Flag</DESCRIPTION>
					<TEXT>The negative flag N indicates a negative result after the different arithmetic and logic operations. See the Instruction Set Description for detailed information.</TEXT>
					<ACCESS>RW</ACCESS>
					<INIT_VAL>0</INIT_VAL>
				</BIT2>
				<BIT1>
					<NAME>Z</NAME>
					<DESCRIPTION>Zero Flag</DESCRIPTION>
					<TEXT>The zero flag Z indicates a zero result after the different arithmetic and logic operations. See the Instruction Set Description for detailed information.</TEXT>
					<ACCESS>RW</ACCESS>
					<INIT_VAL>0</INIT_VAL>
				</BIT1>
				<BIT0>
					<NAME>C</NAME>
					<DESCRIPTION>Carry Flag</DESCRIPTION>
					<TEXT>The carry flag C indicates a carry in an arithmetic or logic operation. See the Instruction Set Description for detailed information. Note that the status register is not automatically stored when entering an interrupt routine and restored when returning from an interrupt routine. This must be handled by software.</TEXT>
					<ACCESS>RW</ACCESS>
					<INIT_VAL>0</INIT_VAL>
				</BIT0>
			</SREG>
			<SPL>
				<NAME>SPL</NAME>
				<DESCRIPTION>Stack Pointer Low</DESCRIPTION>
				<TEXT>The general AVR 16-bit Stack Pointer is effectively built up of two 8-bit registers in the I/O space locations $3E ($5E) and $3D ($5D). As the AT90S4414/8515 supports up to 64 kB external SRAM, all 16-bits are used. The Stack Pointer points to the data SRAM stack area where the Subroutine and Interrupt Stacks are located. This Stack space in the data SRAM must be defined by the program before any subroutine calls are executed or interrupts are enabled. The stack pointer must be set to point above $60. The Stack Pointer is decremented by one when data is pushed onto the Stack with the PUSH instruction, and it is decremented by two when an address is pushed onto the Stack with subroutine calls and interrupts. The Stack Pointer is incremented by one when data is popped from the Stack with the POP instruction, and it is incremented by two when an address is popped from the Stack with return from subroutine RET or return from interrupt </TEXT>
				<IO_ADDR>$3D</IO_ADDR>
				<MEM_ADDR>$5D</MEM_ADDR>
				<ICON/>
				<DISPLAY_BITS>N</DISPLAY_BITS>
				<BIT7>
					<NAME>SP7</NAME>
					<DESCRIPTION>Stack pointer bit 7</DESCRIPTION>
					<TEXT/>
					<ACCESS>RW</ACCESS>
					<INIT_VAL>0</INIT_VAL>
				</BIT7>
				<BIT6>
					<NAME>SP6</NAME>
					<DESCRIPTION>Stack pointer bit 6</DESCRIPTION>
					<TEXT/>
					<ACCESS>RW</ACCESS>
					<INIT_VAL>0</INIT_VAL>
				</BIT6>
				<BIT5>
					<NAME>SP5</NAME>
					<DESCRIPTION>Stack pointer bit 5</DESCRIPTION>
					<TEXT/>
					<ACCESS>RW</ACCESS>
					<INIT_VAL>0</INIT_VAL>
				</BIT5>
				<BIT4>
					<NAME>SP4</NAME>
					<DECRIPTION>Stack pointer bit 4</DECRIPTION>
					<TEXT/>
					<ACCESS>RW</ACCESS>
					<INIT_VAL>0</INIT_VAL>
				</BIT4>
				<BIT3>
					<NAME>SP3</NAME>
					<DESCRIPTION>Stack pointer bit 3</DESCRIPTION>
					<TEXT/>
					<ACCESS>RW</ACCESS>
					<INIT_VAL>0</INIT_VAL>
				</BIT3>
				<BIT2>
					<NAME>SP2</NAME>
					<DESCRIPTION>Stack pointer bit 2</DESCRIPTION>
					<TEXT/>
					<ACCESS>RW</ACCESS>
					<INIT_VAL>0</INIT_VAL>
				</BIT2>
				<BIT1>
					<NAME>SP1</NAME>
					<DESCRIPTION>Stack pointer bit 1</DESCRIPTION>
					<TEXT/>
					<ACCESS>RW</ACCESS>
					<INIT_VAL>0</INIT_VAL>
				</BIT1>
				<BIT0>
					<NAME>SP0</NAME>
					<DESCRIPTION>Stack pointer bit 0</DESCRIPTION>
					<TEXT/>
					<ACCESS>RW</ACCESS>
					<INIT_VAL>0</INIT_VAL>
				</BIT0>
			</SPL>
			<MCUSR>
				<NAME>MCUSR</NAME>
				<DESCRIPTION>MCU Status register</DESCRIPTION>
				<TEXT>The MCU Status Registerprovides information on which reset source caused a MCU reset.</TEXT>
				<IO_ADDR>$34</IO_ADDR>
				<MEM_ADDR>$54</MEM_ADDR>
				<ICON>io_cpu.bmp</ICON>
				<DISPLAY_BITS>Y</DISPLAY_BITS>
				<BIT1>
					<NAME>EXTRF</NAME>
					<DESCRIPTION>External Reset Flag</DESCRIPTION>
					<TEXT>After a power-on reset, this bit is undefined (X). It will be set by an external reset. A watchdog reset will leave this bit unchanged.</TEXT>
					<ACCESS>RW</ACCESS>
					<INIT_VAL>0</INIT_VAL>
				</BIT1>
				<BIT0>
					<NAME>PORF</NAME>
					<DESCRIPTION>Power-On Reset Flag</DESCRIPTION>
					<TEXT>This bit is set by a power-on reset. A watchdog reset or an external reset will leave this bit unchanged</TEXT>
					<ACCESS>RW</ACCESS>
					<INIT_VAL>0</INIT_VAL>
				</BIT0>
			</MCUSR>
			<MCUCR>
				<NAME>MCUCR</NAME>
				<DESCRIPTION>MCU Control Register</DESCRIPTION>
				<TEXT>The MCU Control Register contains control bits for general MCU functions.</TEXT>
				<IO_ADDR>$35</IO_ADDR>
				<MEM_ADDR>$55</MEM_ADDR>
				<ICON>io_cpu.bmp</ICON>
				<DISPLAY_BITS>Y</DISPLAY_BITS>
				<BIT5>
					<NAME>SE</NAME>
					<DESCRIPTION>Sleep Enable</DESCRIPTION>
					<TEXT>The SE bit must be set (one) to make the MCU enter the sleep mode when the SLEEP instruction is executed. To avoid the MCU entering the sleep mode unless it is the programmers purpose, it is recommended to set the Sleep Enable SE bit just before the execution of the SLEEP instruction.</TEXT>
					<ACCESS>R</ACCESS>
					<INIT_VAL>0</INIT_VAL>
				</BIT5>
				<BIT4>
					<NAME>SM</NAME>
					<DESCRIPTION>Sleep Mode</DESCRIPTION>
					<TEXT>This bit selects between the two available sleep modes. When SM is cleared (zero), Idle Mode is selected as Sleep Mode. When SM is set (one), Power Down mode is selected as sleep mode. For details, refer to the section “Sleep Modes” on page 25.</TEXT>
					<ACCESS>R</ACCESS>
					<INIT_VAL>0</INIT_VAL>
				</BIT4>
				<BIT1>
					<NAME>ISC01</NAME>
					<DESCRIPTION>Interrupt Sense Control 0 bit 1</DESCRIPTION>
					<TEXT/>
					<ACCESS>R</ACCESS>
					<INIT_VAL>0</INIT_VAL>
				</BIT1>
				<BIT0>
					<NAME>ISC00</NAME>
					<DESCRIPTION>Interrupt Sense Control 0 bit 0</DESCRIPTION>
					<TEXT/>
					<ACCESS>R</ACCESS>
					<INIT_VAL>0</INIT_VAL>
				</BIT0>
			</MCUCR>
		</CPU>
		<TIMER_COUNTER_0>
			<LIST>[TIMSK:TIFR:TCCR0:TCNT0]</LIST>
			<LINK/>
			<ICON>io_timer.bmp</ICON>
			<ID>t81</ID>
			<TEXT>The 8-bit Timer/Counter0 can select clock source from CK, prescaled CK, or an external pin. In addition it can be stopped as described in “Timer/Counter0 Control Register - TCCR0” on page 35. The overflow status flag is found in “The Timer/Counter Interrupt Flag Register - TIFR” on page 29. Control signals are found in the Timer/Counter0 Control Register - TCCR0. The interrupt enable/disable settings for Timer/Counter0 are found in “The Timer/Counter Interrupt Mask Regis-ter - TIMSK” on page 28. When Timer/Counter0 is externally clocked, the external signal is synchronized with the oscillator frequency of the CPU. To assure proper sampling of the external clock, the minimum time between two external clock transitions must be at least one internal CPU clock period. The external clock signal is sampled on the rising edge of the internal CPU clock. The 8-bit Timer/Counter0 features both a high resolution and a high accuracy usage with the lower prescaling opportuni-ties. Similarly, the high prescaling opportuni ties make the Timer/Counter0 useful for lower speed functions or exact timing functions with infrequent actions</TEXT>
			<TIMSK>
				<NAME>TIMSK</NAME>
				<DESCRIPTION>Timer/Counter Interrupt Mask Register</DESCRIPTION>
				<TEXT/>
				<IO_ADDR>$39</IO_ADDR>
				<MEM_ADDR>$59</MEM_ADDR>
				<ICON>io_flag.bmp</ICON>
				<DISPLAY_BITS>Y</DISPLAY_BITS>
				<BIT1>
					<NAME>TOIE0</NAME>
					<DESCRIPTION>Timer/Counter0 Overflow Interrupt Enable</DESCRIPTION>
					<TEXT>When the TOIE0 bit is set (one) and the I-bit in the Status Register is set (one), the Timer/Counter0 Overflow interrupt is enabled. The corresponding interrupt  is executed if an overflow in Timer/Counter0 occurs, i.e., when the TOV0 bit is set in the Timer/Counter Interrupt Flag Register - TIFR.</TEXT>
					<ACCESS>RW</ACCESS>
					<INIT_VAL>0</INIT_VAL>
				</BIT1>
			</TIMSK>
			<TIFR>
				<NAME>TIFR</NAME>
				<DESCRIPTION>Timer/Counter Interrupt Flag register</DESCRIPTION>
				<TEXT/>
				<IO_ADDR>$38</IO_ADDR>
				<MEM_ADDR>$58</MEM_ADDR>
				<ICON>io_flag.bmp</ICON>
				<DISPLAY_BITS>Y</DISPLAY_BITS>
				<BIT1>
					<NAME>TOV0</NAME>
					<DESCRIPTION>Timer/Counter0 Overflow Flag</DESCRIPTION>
					<TEXT>The bit TOV0 is set (one) when an overflow occurs in Timer/Counter0. TOV0 is cleared by hardware when executing the corresponding interrupt handling vector. Alternatively, TOV0 is cleared by writing a logic one to the flag. When the SREG I-bit, and TOIE0 (Timer/Counter0 Overflow Interrupt Enable), and TOV0 are set (one), the Timer/Counter0 Overflow interrupt is executed.</TEXT>
					<ACCESS>RW</ACCESS>
					<INIT_VAL>0</INIT_VAL>
				</BIT1>
			</TIFR>
			<TCCR0>
				<NAME>TCCR0</NAME>
				<DESCRIPTION>Timer/Counter0 Control Register</DESCRIPTION>
				<TEXT/>
				<IO_ADDR>$33</IO_ADDR>
				<MEM_ADDR>$53</MEM_ADDR>
				<ICON>io_flag.bmp</ICON>
				<DISPLAY_BITS>Y</DISPLAY_BITS>
				<BIT2>
					<NAME>CS02</NAME>
					<DESCRIPTION>Clock Select0 bit 2</DESCRIPTION>
					<TEXT/>
					<ACCESS>RW</ACCESS>
					<INIT_VAL>0</INIT_VAL>
				</BIT2>
				<BIT1>
					<NAME>CS01</NAME>
					<DESCRIPTION>Clock Select0 bit 1</DESCRIPTION>
					<TEXT/>
					<ACCESS>RW</ACCESS>
					<INIT_VAL>0</INIT_VAL>
				</BIT1>
				<BIT0>
					<NAME>CS00</NAME>
					<DESCRIPTION>Clock Select0 bit 0</DESCRIPTION>
					<TEXT/>
					<ACCESS>RW</ACCESS>
					<INIT_VAL>0</INIT_VAL>
				</BIT0>
			</TCCR0>
			<TCNT0>
				<NAME>TCNT0</NAME>
				<DESCRIPTION>Timer Counter 0</DESCRIPTION>
				<TEXT>The Timer/Counter0 is realized as an up-counter with read and write access. If the Timer/Counter0 is written and a clock source is present, the Timer/Counter0 continues counting in the clock cycle following the write operation.</TEXT>
				<IO_ADDR>$32</IO_ADDR>
				<MEM_ADDR>$52</MEM_ADDR>
				<ICON>io_timer.bmp</ICON>
				<DISPLAY_BITS>N</DISPLAY_BITS>
				<BIT7>
					<NAME>TCNT07</NAME>
					<DESCRIPTION>Timer Counter 0 bit 7</DESCRIPTION>
					<TEXT/>
					<ACCESS>RW</ACCESS>
					<INIT_VAL>0</INIT_VAL>
				</BIT7>
				<BIT6>
					<NAME>TCNT06</NAME>
					<DESCRIPTION>Timer Counter 0 bit 6</DESCRIPTION>
					<TEXT/>
					<ACCESS>RW</ACCESS>
					<INIT_VAL>0</INIT_VAL>
				</BIT6>
				<BIT5>
					<NAME>TCNT05</NAME>
					<DESCRIPTION>Timer Counter 0 bit 5</DESCRIPTION>
					<TEXT/>
					<ACCESS>RW</ACCESS>
					<INIT_VAL>0</INIT_VAL>
				</BIT5>
				<BIT4>
					<NAME>TCNT04</NAME>
					<DESCRIPTION>Timer Counter 0 bit 4</DESCRIPTION>
					<TEXT/>
					<ACCESS>RW</ACCESS>
					<INIT_VAL>0</INIT_VAL>
				</BIT4>
				<BIT3>
					<NAME>TCNT03</NAME>
					<DESCRIPTION>Timer Counter 0 bit 3</DESCRIPTION>
					<TEXT/>
					<ACCESS>RW</ACCESS>
					<INIT_VAL>0</INIT_VAL>
				</BIT3>
				<BIT2>
					<NAME>TCNT02</NAME>
					<DESCRIPTION>Timer Counter 0 bit 2</DESCRIPTION>
					<TEXT/>
					<ACCESS>RW</ACCESS>
					<INIT_VAL>0</INIT_VAL>
				</BIT2>
				<BIT1>
					<NAME>TCNT01</NAME>
					<DESCRIPTION>Timer Counter 0 bit 1</DESCRIPTION>
					<TEXT/>
					<ACCESS>RW</ACCESS>
					<INIT_VAL>0</INIT_VAL>
				</BIT1>
				<BIT0>
					<NAME>TCNT00</NAME>
					<DESCRIPTION>Timer Counter 0 bit 0</DESCRIPTION>
					<TEXT/>
					<ACCESS>RW</ACCESS>
					<INIT_VAL>0</INIT_VAL>
				</BIT0>
			</TCNT0>
		</TIMER_COUNTER_0>
		<EEPROM>
			<LIST>[EEAR:EEDR:EECR]</LIST>
			<LINK/>
			<ICON>io_cpu.bmp</ICON>
			<ID>EEPROM_02.xml</ID>
			<TEXT/>
			<EEAR>
				<NAME>EEAR</NAME>
				<DESCRIPTION>EEPROM Read/Write Access</DESCRIPTION>
				<TEXT>The EEPROM access register is accessible in the I/O space. The write access time is in the range of 2.5 - 4ms, depending on the V CC voltages. A self-timing function, however, lets the user software detect when the next byte can be written. If the user code contains code that writes the EEPROM, some pre-caution must be taken. In heavily filtered power supplies, V CC is likely to rise or fall slowly on power-up/down. This causes the device for some period of time to run at a voltage lower than specified as minimum for the clock frequency used. CPU operation under these conditions is likely cause the program counter to perform unintentional jumps and eventually execute the EEPROM write code. To secure EEPROM integrity, the user is advised to use an external under-voltage reset circuit in this case. In order to prevent unintentional EEPROM writes, a specific write procedure must be followed. Refer to the description of the EEPROM Control Register for details on this. When the EEPROM is written, the CPU is halted for two clock cycles before the next instruction is executed. When the EEPROM is read, the CPU is halted for four clock cycles before the next instruction</TEXT>
				<IO_ADDR>$1E</IO_ADDR>
				<MEM_ADDR>$3E</MEM_ADDR>
				<ICON>io_cpu.bmp</ICON>
				<DISPLAY_BITS>N</DISPLAY_BITS>
				<BIT7>
					<NAME>EEAR7</NAME>
					<DESCRIPTION>EEPROM Read/Write Access bit 7</DESCRIPTION>
					<TEXT/>
					<ACCESS>RW</ACCESS>
					<INIT_VAL>8</INIT_VAL>
				</BIT7>
				<BIT6>
					<NAME>EEAR6</NAME>
					<DESCRIPTION>EEPROM Read/Write Access bit 6</DESCRIPTION>
					<TEXT/>
					<ACCESS>RW</ACCESS>
					<INIT_VAL>0</INIT_VAL>
				</BIT6>
				<BIT5>
					<NAME>EEAR5</NAME>
					<DESCRIPTION>EEPROM Read/Write Access bit 5</DESCRIPTION>
					<TEXT/>
					<ACCESS>RW</ACCESS>
					<INIT_VAL>0</INIT_VAL>
				</BIT5>
				<BIT4>
					<NAME>EEAR4</NAME>
					<DESCRIPTION>EEPROM Read/Write Access bit 4</DESCRIPTION>
					<TEXT/>
					<ACCESS>RW</ACCESS>
					<INIT_VAL>0</INIT_VAL>
				</BIT4>
				<BIT3>
					<NAME>EEAR3</NAME>
					<DESCRIPTION>EEPROM Read/Write Access bit 3</DESCRIPTION>
					<TEXT/>
					<ACCESS>RW</ACCESS>
					<INIT_VAL>0</INIT_VAL>
				</BIT3>
				<BIT2>
					<NAME>EEAR2</NAME>
					<DESCRIPTION>EEPROM Read/Write Access bit 2</DESCRIPTION>
					<TEXT/>
					<ACCESS>RW</ACCESS>
					<INIT_VAL>0</INIT_VAL>
				</BIT2>
				<BIT1>
					<NAME>EEAR1</NAME>
					<DESCRIPTION>EEPROM Read/Write Access bit 1</DESCRIPTION>
					<TEXT/>
					<ACCESS>RW</ACCESS>
					<INIT_VAL>0</INIT_VAL>
				</BIT1>
				<BIT0>
					<NAME>EEAR0</NAME>
					<DESCRIPTION>EEPROM Read/Write Access bit 0</DESCRIPTION>
					<TEXT/>
					<ACCESS>RW</ACCESS>
					<INIT_VAL>0</INIT_VAL>
				</BIT0>
			</EEAR>
			<EEDR>
				<NAME>EEDR</NAME>
				<DESCRIPTION>EEPROM Data Register</DESCRIPTION>
				<TEXT>For the EEPROM write operation, the EEDR register contains the data to be written to the EEPROM in the address given by the EEAR register. For the EEPROM read operation, the EEDR contains the data read out from the EEPROM at the address given by EEAR.</TEXT>
				<IO_ADDR>$1D</IO_ADDR>
				<MEM_ADDR>$3D</MEM_ADDR>
				<ICON>io_cpu.bmp</ICON>
				<DISPLAY_BITS>N</DISPLAY_BITS>
				<BIT7>
					<NAME>EEDR7</NAME>
					<DESCRIPTION>EEPROM Data Register bit 7</DESCRIPTION>
					<TEXT/>
					<ACCESS>RW</ACCESS>
					<INIT_VAL>0</INIT_VAL>
				</BIT7>
				<BIT6>
					<NAME>EEDR6</NAME>
					<DESCRIPTION>EEPROM Data Register bit 6</DESCRIPTION>
					<TEXT/>
					<ACCESS>RW</ACCESS>
					<INIT_VAL>0</INIT_VAL>
				</BIT6>
				<BIT5>
					<NAME>EEDR5</NAME>
					<DESCRIPTION>EEPROM Data Register bit 5</DESCRIPTION>
					<TEXT/>
					<ACCESS>RW</ACCESS>
					<INIT_VAL>0</INIT_VAL>
				</BIT5>
				<BIT4>
					<NAME>EEDR4</NAME>
					<DESCRIPTION>EEPROM Data Register bit 4</DESCRIPTION>
					<TEXT/>
					<ACCESS>RW</ACCESS>
					<INIT_VAL>0</INIT_VAL>
				</BIT4>
				<BIT3>
					<NAME>EEDR3</NAME>
					<DESCRIPTION>EEPROM Data Register bit 3</DESCRIPTION>
					<TEXT/>
					<ACCESS>RW</ACCESS>
					<INIT_VAL>0</INIT_VAL>
				</BIT3>
				<BIT2>
					<NAME>EEDR2</NAME>
					<DESCRIPTION>EEPROM Data Register bit 2</DESCRIPTION>
					<TEXT/>
					<ACCESS>RW</ACCESS>
					<INIT_VAL>0</INIT_VAL>
				</BIT2>
				<BIT1>
					<NAME>EEDR1</NAME>
					<DESCRIPTION>EEPROM Data Register bit 1</DESCRIPTION>
					<TEXT/>
					<ACCESS>RW</ACCESS>
					<INIT_VAL>0</INIT_VAL>
				</BIT1>
				<BIT0>
					<NAME>EEDR0</NAME>
					<DESCRIPTION>EEPROM Data Register bit 0</DESCRIPTION>
					<TEXT/>
					<ACCESS>RW</ACCESS>
					<INIT_VAL>0</INIT_VAL>
				</BIT0>
			</EEDR>
			<EECR>
				<NAME>EECR</NAME>
				<DESCRIPTION>EEPROM Control Register</DESCRIPTION>
				<TEXT/>
				<IO_ADDR>$1C</IO_ADDR>
				<MEM_ADDR>$3C</MEM_ADDR>
				<ICON>io_flag.bmp</ICON>
				<DISPLAY_BITS>Y</DISPLAY_BITS>
				<BIT2>
					<NAME>EEMWE</NAME>
					<DESCRIPTION>EEPROM Master Write Enable</DESCRIPTION>
					<TEXT>The EEMWE bit determines whether setting EEWE to one causes the EEPROM to be written. When EEMWE is set(one) setting EEWE will write data to the EEPROM at the selected address If EEMWE is zero, setting EEWE will have no effect. When EEMWE has been set (one) by software, hardware clears the bit to zero after four clock cycles. See the description of the EEWE bit for a EEPROM write procedure.</TEXT>
					<ACCESS>RW</ACCESS>
					<INIT_VAL>0</INIT_VAL>
				</BIT2>
				<BIT1>
					<NAME>EEWE</NAME>
					<DESCRIPTION>EEPROM Write Enable</DESCRIPTION>
					<TEXT>The EEPROM Write Enable Signal EEWE is the write strobe to the EEPROM. When address and data are correctly set up, the EEWE bit must be set to write the value into the EEPROM. The EEMWE bit must be set when the logical one is written to EEWE, otherwise no EEPROM write takes place. The following procedure should be followed when writing the EEPROM (the order of steps 2 and 3 is unessential): 1. Wait until EEWE becomes zero. 2. Write new EEPROM address to EEARL and EEARH (optional). 3. Write new EEPROM data to EEDR (optional). 4. Write a logical one to the EEMWE bit in EECR (to be able to write a logical one to the EEMWE bit, the EEWE bit mustbewritten to zero in thesamecycle). 5. Within four clock cycles after setting EEMWE, write a logical one to EEWE. When the write access time (typically 2.5 ms at V CC =5Vor 4msatV CC = 2.7V) has elapsed, the EEWE bit is cleared (zero) by hardware. The user software can poll this bit and wait for a zero before writing the next byte. When EEWE has been set, the CPU is halted or two cycles before the next instruction is executed. Caution: An interrupt between step 4 and step 5 will make the write cycle fail, since the EEPROM Master Write Enable will time-out. If an interrupt routine accessing the EEPROM is interrupting another EEPROM access, the EEAR or EEDR regis-ter will be modified, causing the interrupted EEPROM access to fail. It is recommended to have the global interrupt flag cleared during the 4 last steps to avoid these problems.</TEXT>
					<ACCESS>RW</ACCESS>
					<INIT_VAL>0</INIT_VAL>
				</BIT1>
				<BIT0>
					<NAME>EERE</NAME>
					<DESCRIPTION>EEPROM Read Enable</DESCRIPTION>
					<TEXT>The EEPROM Read Enable Signal EERE is the read strobe to the EEPROM. When the correct address is set up in the EEAR register, the EERE bit must be set. When the EERE bit is cleared (zero) by hardware, requested data is found in the EEDR register. The EEPROM read access takes one instruction and there is no need to poll the EERE bit. When EERE has been set, the CPU is halted for four cycles before the next instruction is executed. The user should poll the EEWE bit before starting the read operation. If a write operation is in progress when new data or address is written to the EEPROM I/O registers, the write operation will be interrupted, and the result is undefined.</TEXT>
					<ACCESS>RW</ACCESS>
					<INIT_VAL>0</INIT_VAL>
				</BIT0>
			</EECR>
		</EEPROM>
		<WATCHDOG>
			<LIST>[WDTCR]</LIST>
			<LINK/>
			<ICON>io_watch.bmp</ICON>
			<ID/>
			<TEXT/>
			<WDTCR>
				<NAME>WDTCR</NAME>
				<DESCRIPTION>Watchdog Timer Control Register</DESCRIPTION>
				<TEXT/>
				<IO_ADDR>$21</IO_ADDR>
				<MEM_ADDR>$41</MEM_ADDR>
				<ICON>io_flag.bmp</ICON>
				<DISPLAY_BITS>Y</DISPLAY_BITS>
				<BIT4>
					<NAME>WDTOE</NAME>
					<DESCRIPTION>RW</DESCRIPTION>
					<TEXT>This bit must be set (one) when the WDE bit is cleared. Otherwise, the watchdog will not be disabled. Once set, hardware will clear this bit to zero after four clock cycles. Refer to the description of the WDE bit for a watchdog disable procedure.</TEXT>
					<ACCESS>RW</ACCESS>
					<INIT_VAL>0</INIT_VAL>
				</BIT4>
				<BIT3>
					<NAME>WDE</NAME>
					<DESCRIPTION>Watch Dog Enable</DESCRIPTION>
					<TEXT>When the WDE is set (one) the Watchdog Timer is enabled, and if the WDE is cleared (zero) the Watchdog Timer function is disabled. WDE can only be cleared if the WDTOE bit is set(one). To disable an enabled watchdog timer, the following procedure must be followed: 1. In the same operation, write a logical one to WDTOE and WDE. A logical one must be written to WDE even though it is set to one before the disable operation starts. 2. Within the next four clock cycles, write a logical 0 to WDE. This disables the watchdog</TEXT>
					<ACCESS>RW</ACCESS>
					<INIT_VAL>0</INIT_VAL>
				</BIT3>
				<BIT2>
					<NAME>WDP2</NAME>
					<DESCRIPTION>Watch Dog Timer Prescaler bit 2</DESCRIPTION>
					<TEXT/>
					<ACCESS>RW</ACCESS>
					<INIT_VAL>0</INIT_VAL>
				</BIT2>
				<BIT1>
					<NAME>WDP1</NAME>
					<DESCRIPTION>Watch Dog Timer Prescaler bit 1</DESCRIPTION>
					<TEXT/>
					<ACCESS>RW</ACCESS>
					<INIT_VAL>0</INIT_VAL>
				</BIT1>
				<BIT0>
					<NAME>WDP0</NAME>
					<DESCRIPTION>Watch Dog Timer Prescaler bit 0</DESCRIPTION>
					<TEXT/>
					<ACCESS>RW</ACCESS>
					<INIT_VAL>0</INIT_VAL>
				</BIT0>
			</WDTCR>
		</WATCHDOG>
		<PORTB>
			<LIST>[PORTB:DDRB:PINB]</LIST>
			<LINK/>
			<ICON>io_port.bmp</ICON>
			<ID>AVRSimIOPort.SimIOPort</ID>
			<TEXT/>
			<PORTB>
				<NAME>PORTB</NAME>
				<DESCRIPTION>Data Register, Port B</DESCRIPTION>
				<TEXT/>
				<IO_ADDR>$18</IO_ADDR>
				<MEM_ADDR>$38</MEM_ADDR>
				<ICON>io_port.bmp</ICON>
				<DISPLAY_BITS>N</DISPLAY_BITS>
				<BIT4>
					<NAME>PORTB4</NAME>
					<DESCRIPTION/>
					<TEXT/>
					<ACCESS>RW</ACCESS>
					<INIT_VAL>0</INIT_VAL>
				</BIT4>
				<BIT3>
					<NAME>PORTB3</NAME>
					<DESCRIPTION/>
					<TEXT/>
					<ACCESS>RW</ACCESS>
					<INIT_VAL>0</INIT_VAL>
				</BIT3>
				<BIT2>
					<NAME>PORTB2</NAME>
					<DESCRIPTION/>
					<TEXT/>
					<ACCESS>RW</ACCESS>
					<INIT_VAL>0</INIT_VAL>
				</BIT2>
				<BIT1>
					<NAME>PORTB1</NAME>
					<DESCRIPTION/>
					<TEXT/>
					<ACCESS>RW</ACCESS>
					<INIT_VAL>0</INIT_VAL>
				</BIT1>
				<BIT0>
					<NAME>PORTB0</NAME>
					<DESCRIPTION/>
					<TEXT/>
					<ACCESS>RW</ACCESS>
					<INIT_VAL>0</INIT_VAL>
				</BIT0>
			</PORTB>
			<DDRB>
				<NAME>DDRB</NAME>
				<DESCRIPTION>Data Direction Register, Port B</DESCRIPTION>
				<TEXT/>
				<IO_ADDR>$17</IO_ADDR>
				<MEM_ADDR>$37</MEM_ADDR>
				<ICON>io_flag.bmp</ICON>
				<DISPLAY_BITS>N</DISPLAY_BITS>
				<BIT4>
					<NAME>DDRB4</NAME>
					<DESCRIPTION/>
					<TEXT/>
					<ACCESS>RW</ACCESS>
					<INIT_VAL>0</INIT_VAL>
				</BIT4>
				<BIT3>
					<NAME>DDRB3</NAME>
					<DESCRIPTION/>
					<TEXT/>
					<ACCESS>RW</ACCESS>
					<INIT_VAL>0</INIT_VAL>
				</BIT3>
				<BIT2>
					<NAME>DDRB2</NAME>
					<DESCRIPTION/>
					<TEXT/>
					<ACCESS>RW</ACCESS>
					<INIT_VAL>0</INIT_VAL>
				</BIT2>
				<BIT1>
					<NAME>DDRB1</NAME>
					<DESCRIPTION/>
					<TEXT/>
					<ACCESS>RW</ACCESS>
					<INIT_VAL>0</INIT_VAL>
				</BIT1>
				<BIT0>
					<NAME>DDRB0</NAME>
					<DESCRIPTION/>
					<TEXT/>
					<ACCESS>RW</ACCESS>
					<INIT_VAL>0</INIT_VAL>
				</BIT0>
			</DDRB>
			<PINB>
				<NAME>PINB</NAME>
				<DESCRIPTION>Input Pins, Port B</DESCRIPTION>
				<TEXT/>
				<IO_ADDR>$16</IO_ADDR>
				<MEM_ADDR>$36</MEM_ADDR>
				<ICON>io_port.bmp</ICON>
				<DISPLAY_BITS>N</DISPLAY_BITS>
				<BIT4>
					<NAME>PINB4</NAME>
					<DESCRIPTION/>
					<TEXT/>
					<ACCESS>R</ACCESS>
					<INIT_VAL>0</INIT_VAL>
				</BIT4>
				<BIT3>
					<NAME>PINB3</NAME>
					<DESCRIPTION/>
					<TEXT/>
					<ACCESS>R</ACCESS>
					<INIT_VAL>0</INIT_VAL>
				</BIT3>
				<BIT2>
					<NAME>PINB2</NAME>
					<DESCRIPTION/>
					<TEXT/>
					<ACCESS>R</ACCESS>
					<INIT_VAL>0</INIT_VAL>
				</BIT2>
				<BIT1>
					<NAME>PINB1</NAME>
					<DESCRIPTION/>
					<TEXT/>
					<ACCESS>R</ACCESS>
					<INIT_VAL>0</INIT_VAL>
				</BIT1>
				<BIT0>
					<NAME>PINB0</NAME>
					<DESCRIPTION/>
					<TEXT/>
					<ACCESS>R</ACCESS>
					<INIT_VAL>0</INIT_VAL>
				</BIT0>
			</PINB>
		</PORTB>
	</IO_MODULE><ICE_SETTINGS><MODULE_LIST>[SIMULATOR]</MODULE_LIST><SIMULATOR>
			<CoreID>AVRSimCoreV1.SimCoreV1</CoreID>
			<MemoryID>AVRSimMemory8bit.SimMemory8bit</MemoryID>
			<InterruptID>AVRSimInterrupt.SimInterrupt</InterruptID>
			<NmbIOModules>3</NmbIOModules>
			<PORTB>
				<ID>AVRSimIOPort.SimIOPort</ID>
				<MASK>0x07</MASK>
			</PORTB>
			<EXTINT0>
				<ID>AVRSimIOExtInterrupt.SimIOExtInterrupt</ID>
				<IntVector>0x01</IntVector>
				<EnableIOAdr>0x3b</EnableIOAdr>
				<EnableMask>0x40</EnableMask>
				<FlagIOAdr>0x3a</FlagIOAdr>
				<FlagMask>0x40</FlagMask>
				<ExtPinIOAdr>0x16</ExtPinIOAdr>
				<ExtPinMask>0x02</ExtPinMask>
				<SenseIOAdr>0x35</SenseIOAdr>
				<SenseMask>0x03</SenseMask>
			</EXTINT0>
			<TIMER0>
				<ID>AVRSimIOTimert81.SimIOTimert81</ID>
				<IntVector>0x02</IntVector>
				<ExtPinIOAdr>0x16</ExtPinIOAdr>
				<ExtPinMask>0x04</ExtPinMask>
			</TIMER0>
			<DEFAULT_SETTINGS>
				<HighFuse>0x99</HighFuse>
				<ExtendedFuse>0xff</ExtendedFuse>
				<LowFuse>0xe1</LowFuse>
				<Lockbit>0xff</Lockbit>
			</DEFAULT_SETTINGS>
		</SIMULATOR>
	</ICE_SETTINGS></AVRPART>
